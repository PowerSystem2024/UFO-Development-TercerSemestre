# üéÆ Avatar Battle Game - Proyecto en JavaScript

Este es un proyecto simple realizado en HTML y JavaScript que simula una batalla entre personajes del universo de Avatar: La Leyenda de Aang. Se trata de un juego por rondas donde el jugador y la computadora eligen un ataque, y se enfrentan con una l√≥gica parecida al cl√°sico piedra, papel o tijera.

Estoy en segundo a√±o por terminar la tecnicatura en programaci√≥n y este proyecto forma parte de mi pr√°ctica con el DOM, eventos, estructuras condicionales y l√≥gica de juego.

---

## üõ†Ô∏è ¬øC√≥mo funciona?

El usuario selecciona un personaje y luego elige entre tres ataques posibles: **Pu√±o**, **Patada** o **Barrida**. Cada personaje comienza con 3 vidas. El primero que pierda todas sus vidas, pierde el juego.

---

## üìå L√≥gica de combate

- **Pu√±o** gana a **Barrida**
- **Patada** gana a **Pu√±o**
- **Barrida** gana a **Patada**

---

## ‚öôÔ∏è Explicaci√≥n de funciones

### `iniciarJuego()`
Inicializa el juego cuando se carga la p√°gina. Agrega los listeners a los botones del HTML y prepara las variables que muestran las vidas.

---

### `seleccionarPersonajeJugador()`
Lee qu√© personaje seleccion√≥ el jugador mediante los inputs de tipo `radio` y lo muestra en pantalla. Luego llama a `seleccionarPersonajecomputadora()` para que el enemigo elija al azar.

---

### `seleccionarPersonajecomputadora()`
Selecciona aleatoriamente un personaje para el enemigo y lo muestra en pantalla.

---

### `ataquePunio()`, `ataquePatada()`, `ataqueBarrida()`
Cada una de estas funciones asigna el ataque seleccionado por el jugador y luego genera el ataque del enemigo. Finalmente, se ejecuta la funci√≥n `combate()`.

---

### `ataqueAleatorioEnemigo()`
Genera un n√∫mero aleatorio entre 1 y 3 para determinar el ataque que usar√° la computadora: Pu√±o, Patada o Barrida.

---

### `combate()`
Compara el ataque del jugador con el del enemigo usando la l√≥gica del juego. Si gana una ronda, le resta una vida al oponente correspondiente y actualiza el contador. Tambi√©n muestra el resultado de cada ronda y revisa si el juego ha terminado.

---

### `revisarFinDelJuego()`
Verifica si alguno de los dos lleg√≥ a 0 vidas. Si es as√≠, muestra un mensaje final y desactiva los botones de ataque para terminar el juego.

---

### `mostrarMensaje(mensaje)`
Muestra en pantalla el mensaje de resultado por cada ronda.

---

### `mostrarMensajeFinal(mensaje)`
Muestra un mensaje destacado cuando termina el juego (ganador o perdedor).

---

### `deshabilitarBotonesAtaque()`
Desactiva los botones para evitar que se sigan haciendo ataques despu√©s de terminar el juego.

---

### `aleatorio(min, max)`
Devuelve un n√∫mero entero aleatorio entre `min` y `max`. Lo uso para seleccionar ataques y personajes enemigos al azar.

---

## üí° Cosas que podr√≠a mejorar en versiones futuras

- Agregar sonidos y animaciones.
- Hacer que cada personaje tenga una habilidad distinta.
- Contador de rondas o historial de combates.
- Dise√±o m√°s estilizado y responsive para mobile.

---


# üéÆ Avatar Battle Game - Proyecto con HTML, CSS y JavaScript

Este proyecto fue desarrollado como parte de la cursada de la Tecnicatura en Programaci√≥n (2¬∫ a√±o, UTN San Rafael). Es un juego por rondas inspirado en el universo de *Avatar: La Leyenda de Aang*, en donde el usuario elige un personaje y se enfrenta a un enemigo controlado por la computadora.

---

## üß† L√≥gica del juego

- **Pu√±o** le gana a **Barrida**
- **Patada** le gana a **Pu√±o**
- **Barrida** le gana a **Patada**
- Si ambos jugadores eligen el mismo ataque, es **empate**.

---

## üìÅ Estructura del proyecto

```bash
Avatar/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îî‚îÄ‚îÄ avatar.html
```

> Algunos comandos √∫tiles que usamos:
- `mkdir` para crear carpetas
- `touch` para crear archivos (en Windows se puede usar Notepad)
- `ls` o `dir` para listar
- `ctrl + k + c` para comentar c√≥digo
- `ctrl + k + u` para descomentar

---

## üß± HTML - C√≥mo se eligen los personajes

Ejemplo para el personaje Zuko:

```html
<label for="Zuko">Zuko</label>
<input type="radio" name="personaje" id="Zuko">
```

- `<label>` vincula el texto con el `input` correspondiente mediante `for`.
- Esto permite que al hacer clic en el texto tambi√©n se seleccione el personaje.

---

## üåê JavaScript - Explicaci√≥n de funciones

> üí° Buenas pr√°cticas: colocamos el `<script>` al final del `<body>` o usamos `window.addEventListener('load', iniciarJuego)` para evitar errores si el DOM a√∫n no carg√≥.

### üîÅ Variables Globales

```js
let ataqueJugador;
let ataqueEnemigo;
let vidasJugador = 3;
let vidasEnemigo = 3;
```

Estas variables son accesibles desde cualquier parte del script y permiten mantener el estado del juego.

---

### `iniciarJuego()`

Se ejecuta al cargar la p√°gina:

- Asigna eventos a los botones.
- Obtiene referencias a los elementos del DOM (`spanVidasJugador`, `spanVidasEnemigo`).
- Prepara el juego para empezar.

---

### `seleccionarPersonajeJugador()`

Lee qu√© personaje eligi√≥ el jugador y lo muestra. Luego llama a `seleccionarPersonajecomputadora()` para que el enemigo elija al azar.

> ‚úîÔ∏è Siempre se trabaja con variables (por ejemplo: `let inputZuko = document.getElementById('Zuko')`) para seguir buenas pr√°cticas.

---

### `seleccionarPersonajecomputadora()`

Elige aleatoriamente un personaje enemigo usando:

```js
let personajeAleatorio = personajes[Math.floor(Math.random() * personajes.length)];
```

---

### Funciones de ataque:  
`ataquePunio()`, `ataquePatada()`, `ataqueBarrida()`

Estas asignan el ataque del jugador, generan el ataque enemigo y llaman a `combate()`.

---

### `ataqueAleatorioEnemigo()`

Usa la funci√≥n `aleatorio(min, max)` para simular el ataque del enemigo con un n√∫mero al azar.

---

### `combate()`

Aplica la l√≥gica del juego:

- Si hay empate, muestra mensaje.
- Si el jugador gana, se le resta una vida al enemigo.
- Si pierde, se le resta al jugador.

Tambi√©n actualiza las vidas en el DOM:

```html
<p>Tu personaje <span id="personaje-jugador"></span> tiene <span id="vidas-jugador">3</span> vidas</p>
<p>El personaje <span id="personaje-enemigo"></span> de tu enemigo tiene <span id="vidas-enemigo">3</span> vidas</p>
```

---

### `revisarFinDelJuego()`

Verifica si alguno qued√≥ con 0 vidas, muestra el mensaje final y desactiva los botones.

---

### `mostrarMensaje()` y `mostrarMensajeFinal()`

Usan `.innerHTML` para escribir resultados en pantalla.  
‚ö†Ô∏è `.innerHTML` reemplaza todo el contenido HTML del elemento objetivo.

---

### `deshabilitarBotonesAtaque()`

Evita que el jugador pueda seguir atacando luego de que el juego termina.

---

## üß™ Uso de consola

Para probar funciones o consultar valores, se puede usar la consola del navegador:  
Presionar `Ctrl + Shift + I` y luego acceder al DOM con:  
```js
document.getElementById('Aang')
```

---

## üßë‚Äçüíª Autor

Trabajo realizado por [Roberto], estudiante de la Tecnicatura Universitaria en Programaci√≥n (UTN - FRSR), 2¬∫ a√±o.

Este proyecto me ayud√≥ a repasar:

- DOM y eventos en JS
- L√≥gica condicional
- Variables globales
- Funciones
- Buenas pr√°cticas en programaci√≥n

# ü•ã Juego de Combate de Personajes ‚öîÔ∏è

Este es un juego de combate simple desarrollado en JavaScript, HTML y CSS. Los jugadores seleccionan un personaje y luego se enfrentan a un oponente controlado por la computadora en un combate por turnos, utilizando diferentes tipos de ataques. El objetivo es reducir las vidas del oponente a cero antes de que √©l reduzca las tuyas.

## üöÄ C√≥mo Jugar

1.  **Iniciar el Juego:** Al cargar la p√°gina, ver√°s dos botones iniciales: "Ver Reglas" y "Jugar".
2.  **Ver Reglas (Opcional):** Si quieres revisar las reglas del juego, haz clic en "Ver Reglas". Podr√°s regresar al inicio haciendo clic en "Volver al Inicio".
3.  **Seleccionar Personaje:** Haz clic en "Jugar". Luego, elige tu personaje favorito de la lista disponible (Zuko, Katara, Aang, Toph, Sokka) y haz clic en el bot√≥n "Seleccionar Personaje".
4.  **Atacar:** Una vez que hayas seleccionado tu personaje, se te presentar√°n tres opciones de ataque:
    * **Pu√±o üëä**
    * **Patada ü¶µ**
    * **Barrida üßπ**
    * Elige tu ataque para cada ronda.
5.  **Combate:** Cada vez que ataques, la computadora elegir√° un ataque aleatorio. El juego determinar√° el ganador de la ronda bas√°ndose en las reglas de combate (por ejemplo, Pu√±o vence a Barrida, Patada vence a Pu√±o, Barrida vence a Patada).
6.  **Vidas:** Ambos jugadores comienzan con 3 vidas. Cada vez que pierdes una ronda, pierdes una vida.
7.  **Fin del Juego:** El juego termina cuando uno de los personajes se queda sin vidas. Se mostrar√° un mensaje indicando si ganaste o perdiste.
8.  **Reiniciar:** Despu√©s de que el juego termine, aparecer√° un bot√≥n "Reiniciar" que te permitir√° comenzar una nueva partida.

## ‚öôÔ∏è Estructura del C√≥digo (Para Desarrolladores)

El juego est√° organizado en varias funciones JavaScript, cada una con una responsabilidad espec√≠fica:

* **`iniciarJuego()`:** Funci√≥n principal que se ejecuta al cargar la p√°gina. Inicializa el estado del juego, oculta/muestra secciones y asigna los event listeners a los botones principales.
* **`botonVerReglas()` / `verReglas()` / `volverInicio()`:** Gestionan la visualizaci√≥n de las reglas del juego.
* **`seleccionarPersonajeJugador()`:** Maneja la selecci√≥n del personaje del jugador y muestra el ataque.
* **`seleccionarPersonajecomputadora()`:** Asigna un personaje aleatorio para el enemigo.
* **`ataquePunio()`, `ataquePatada()`, `ataqueBarrida()`:** Funciones que se ejecutan cuando el jugador selecciona un ataque. Establecen el ataque del jugador y llaman a la l√≥gica del enemigo y el combate.
* **`aleatorio()`:** Funci√≥n auxiliar para generar n√∫meros aleatorios dentro de un rango.
* **`ataqueAleatorioEnemigo()`:** Determina el ataque de la computadora de forma aleatoria.
* **`combate()`:** Contiene la l√≥gica central del juego, compara los ataques de ambos jugadores, actualiza las vidas y muestra el resultado de cada ronda.
* **`crearMensaje()`:** Muestra los resultados de cada ronda en la secci√≥n de mensajes.
* **`revisarFinDelJuego()`:** Verifica si alg√∫n jugador se ha quedado sin vidas y declara un ganador o perdedor.
* **`mostrarMensajeFinal()`:** Muestra el mensaje final del juego.
* **`deshabilitarBotonesAtaque()`:** Deshabilita los botones de ataque una vez que el juego ha terminado.
* **`reiniciarJuego()`:** Recarga la p√°gina para empezar una nueva partida.

## üõ†Ô∏è Tecnolog√≠as Utilizadas

* **HTML5:** Para la estructura y contenido del juego.
* **CSS3:** Para el estilo y dise√±o visual.
* **JavaScript (ES6+):** Para la l√≥gica del juego y la interactividad.

## üöÄ Ejecuci√≥n

Para ejecutar este juego localmente:

1.  Clona o descarga el repositorio.
2.  Abre el archivo `index.html` (o el nombre de tu archivo HTML principal) en tu navegador web.

---

¬°Espero que disfrutes de este sencillo juego!

function crearMensaje(){
    let seccionMensajes = document.getElementById('mensajes')
    let parrafo = document.createElement('p')
    parrafo.innerHTML = `Seleccionaste: ${ataqueJugador} üÜö Enemigo: ${ataqueEnemigo} ‚û§ ${resultado}`;
    seccionMensajes.appendChild(parrafo)
}