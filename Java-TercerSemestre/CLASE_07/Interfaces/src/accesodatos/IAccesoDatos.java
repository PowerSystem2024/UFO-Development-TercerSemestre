/*
En Java, una interface es un tipo de referencia que define un contrato: 
es decir, un conjunto de m√©todos que una clase debe implementar. 
Las interfaces se utilizan para lograr abstracci√≥n total y polimorfismo, 
y permiten definir el comportamiento com√∫n 
que puede ser compartido por clases no relacionadas.
 */

/**
 *
 * @author Dario Benitez
 */

/*
‚úÖ ¬øQu√© es una interfaz en Java?
Una interface:
No tiene implementaci√≥n (aunque desde Java 8 puede tener m√©todos default y static con cuerpo).
No puede tener atributos de instancia (solo constantes p√∫blicas static final).
Se implementa en una clase mediante la palabra clave implements.

üí° Ejemplo pr√°ctico
Supongamos que queremos un sistema que controle distintos tipos de veh√≠culos. Todos deben poder arrancar y detenerse, pero su implementaci√≥n concreta puede variar.

1. Definimos la interfaz:

public interface Vehiculo {
    void arrancar();
    void detener();
}

2. Creamos clases que implementan la interfa

public class Auto implements Vehiculo {
    public void arrancar() {
        System.out.println("El auto arranca con llave.");
    }

    public void detener() {
        System.out.println("El auto se detiene usando frenos.");
    }
}


public class Bicicleta implements Vehiculo {
    public void arrancar() {
        System.out.println("La bicicleta comienza a pedalear.");
    }

    public void detener() {
        System.out.println("La bicicleta frena con las manetas.");
    }
}


3. Probamos todo en el main:

public class Main {
    public static void main(String[] args) {
        Vehiculo auto = new Auto();
        Vehiculo bici = new Bicicleta();

        auto.arrancar();
        auto.detener();

        bici.arrancar();
        bici.detener();
    }
}


üÜö Diferencias entre interface y clase abstracta
Caracter√≠stica	Interface	Clase Abstracta
M√©todos	Solo m√©todos abstractos (excepto default y static)	Puede tener m√©todos abstractos y concretos
Herencia	Una clase puede implementar m√∫ltiples interfaces	Una clase solo puede extender una clase abstracta
Campos	Solo public static final (constantes)	Puede tener atributos normales
Constructor	No puede tener	S√≠ puede tener
Nivel de abstracci√≥n	100% abstracta (antes de Java 8)	Puede ser parcialmente abstracta
Ideal para	Definir comportamientos	Definir jerarqu√≠as de clases

üìù Cu√°ndo usar cada uno:
Usa interfaces cuando varias clases no relacionadas necesitan el mismo comportamiento (por ejemplo, Comparable, Serializable).

Usa clases abstractas cuando tienes una jerarqu√≠a l√≥gica (por ejemplo, Animal, Empleado) y m√©todos comunes ya implementados.
*/
package accesodatos;


public interface IAccesoDatos {
    int MAX_REGISTRO = 10;
    
    // Metodo insertar es abstracto y sin cuerpo
    void insertar();
    
    void listar();
    
    void actualizar();
    
    void eliminar();
}
